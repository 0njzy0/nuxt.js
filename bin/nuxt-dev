#!/usr/bin/env node

// Show logs
process.env.DEBUG = 'nuxt:*'

var _ = require('lodash')
var debug = require('debug')('nuxt:build')
var fs = require('fs')
var Nuxt = require('../')
var chokidar = require('chokidar')
var resolve = require('path').resolve

var rootDir = resolve(process.argv.slice(2)[0] || '.')
var nuxtConfigFile = resolve(rootDir, 'nuxt.config.js')

var options = {}
if (fs.existsSync(nuxtConfigFile)) {
  options = require(nuxtConfigFile)
}
if (typeof options.rootDir !== 'string') {
  options.rootDir = rootDir
}
options.dev = true // Add hot reloading and watching changes

var nuxt = new Nuxt(options)
nuxt.build()
.then(() => {
  var server = new nuxt.Server(nuxt)
  .listen(process.env.PORT || process.env.npm_package_config_nuxt_port, process.env.HOST || process.env.npm_package_config_nuxt_host)
  listenOnConfigChanges(nuxt, server)
})
.catch((err) => {
  console.error(err) // eslint-disable-line no-console
  process.exit(1)
})

function listenOnConfigChanges (nuxt, server) {
  // Listen on nuxt.config.js changes
  var build = _.debounce(() => {
    debug('[nuxt.config.js] changed, rebuilding the app...')
    delete require.cache[nuxtConfigFile]
    var options = {}
    if (fs.existsSync(nuxtConfigFile)) {
      try {
        options = require(nuxtConfigFile)
      } catch (e) {
        return console.error(e) // eslint-disable-line no-console
      }
    }
    options.rootDir = rootDir
    nuxt.close()
    .then(() => {
      return new Nuxt(options).build()
    })
    .then((nuxt) => {
      server.nuxt = nuxt
    })
    .catch((error) => {
      console.error('Error while rebuild the app:', error) // eslint-disable-line no-console
      process.exit(1)
    })
  }, 200)
  var nuxtConfigFile = resolve(rootDir, 'nuxt.config.js')
  chokidar.watch(nuxtConfigFile, { ignoreInitial: true })
  .on('all', build)
}
